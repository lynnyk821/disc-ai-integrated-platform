package ua.todolist.server.app.backend.api.assistant;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ua.todolist.server.app.backend.service.assistant.AssistantService;

/**
 * REST Controller for handling chat-based interactions with an AI assistant service.
 * This controller provides an endpoint that accepts user messages and returns
 * generated responses from the underlying {@link AssistantService}.
 * <p>
 * All endpoints are prefixed with the base path {@code /assistant}.
 * </p>
 *
 * @author lynnyk821
 * @version 1.0
 */
@RestController
@RequestMapping("/assistant")
@RequiredArgsConstructor
public class AssistantChatController {

    /**
     * The service responsible for processing the user's message and generating an AI-powered response.
     * Injected via constructor injection by Lombok's {@code @RequiredArgsConstructor}.
     */
    private final AssistantService assistantService;

    /**
     * Processes a user's chat message and returns a generated response.
     * <p>
     * This is a POST endpoint that expects a request parameter named 'message'.
     * The response is a plain text string generated by the AI assistant service.
     * </p>
     * Example usage:
     * <pre>
     * {@code
     * POST /assistant/ask?message=Hello, how are you?
     * }
     * </pre>
     *
     * @param message the user's input message to be processed by the assistant. Cannot be null or empty.
     * @return a {@link ResponseEntity} containing the generated text response with an HTTP 200 status code.
     * @see AssistantService#generateResponse(String)
     */
    @PostMapping("/ask")
    public ResponseEntity<String> chat(@RequestParam String message) {
        String response = assistantService.generateResponse(message);
        return ResponseEntity.ok(response);
    }
}
